// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: profile.proto

/*
Package profile is a generated protocol buffer package.

It is generated from these files:
	profile.proto

It has these top-level messages:
	SearchRequest
	SearchResponse
	SearchUser
	GetInfoRequest
	GetInfoResponse
	UpdateStatusRequest
	UpdateEmailRequest
	ConfirmEmailRequest
	UpdateInfoRequest
	Response
*/
package profile

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Profile service

type ProfileService interface {
	UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...client.CallOption) (*Response, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...client.CallOption) (*Response, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...client.CallOption) (*Response, error)
	ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...client.CallOption) (*Response, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
}

type profileService struct {
	c    client.Client
	name string
}

func NewProfileService(name string, c client.Client) ProfileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "profile"
	}
	return &profileService{
		c:    c,
		name: name,
	}
}

func (c *profileService) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Profile.UpdateInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Profile.UpdateStatus", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Profile.UpdateEmail", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Profile.ConfirmEmail", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Profile.GetInfo", in)
	out := new(GetInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.name, "Profile.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profile service

type ProfileHandler interface {
	UpdateInfo(context.Context, *UpdateInfoRequest, *Response) error
	UpdateStatus(context.Context, *UpdateStatusRequest, *Response) error
	UpdateEmail(context.Context, *UpdateEmailRequest, *Response) error
	ConfirmEmail(context.Context, *ConfirmEmailRequest, *Response) error
	GetInfo(context.Context, *GetInfoRequest, *GetInfoResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
}

func RegisterProfileHandler(s server.Server, hdlr ProfileHandler, opts ...server.HandlerOption) error {
	type profile interface {
		UpdateInfo(ctx context.Context, in *UpdateInfoRequest, out *Response) error
		UpdateStatus(ctx context.Context, in *UpdateStatusRequest, out *Response) error
		UpdateEmail(ctx context.Context, in *UpdateEmailRequest, out *Response) error
		ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, out *Response) error
		GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error
		Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error
	}
	type Profile struct {
		profile
	}
	h := &profileHandler{hdlr}
	return s.Handle(s.NewHandler(&Profile{h}, opts...))
}

type profileHandler struct {
	ProfileHandler
}

func (h *profileHandler) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, out *Response) error {
	return h.ProfileHandler.UpdateInfo(ctx, in, out)
}

func (h *profileHandler) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, out *Response) error {
	return h.ProfileHandler.UpdateStatus(ctx, in, out)
}

func (h *profileHandler) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, out *Response) error {
	return h.ProfileHandler.UpdateEmail(ctx, in, out)
}

func (h *profileHandler) ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, out *Response) error {
	return h.ProfileHandler.ConfirmEmail(ctx, in, out)
}

func (h *profileHandler) GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error {
	return h.ProfileHandler.GetInfo(ctx, in, out)
}

func (h *profileHandler) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.ProfileHandler.Search(ctx, in, out)
}
