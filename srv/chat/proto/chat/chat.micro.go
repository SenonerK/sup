// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chat.proto

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	ReceiveRequest
	ReceiveResponse
	UserChat
	SendRequest
	Response
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Chat service

type ChatService interface {
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*Response, error)
	Receive(ctx context.Context, in *ReceiveRequest, opts ...client.CallOption) (*ReceiveResponse, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chat"
	}
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Chat.Send", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Receive(ctx context.Context, in *ReceiveRequest, opts ...client.CallOption) (*ReceiveResponse, error) {
	req := c.c.NewRequest(c.name, "Chat.Receive", in)
	out := new(ReceiveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatHandler interface {
	Send(context.Context, *SendRequest, *Response) error
	Receive(context.Context, *ReceiveRequest, *ReceiveResponse) error
}

func RegisterChatHandler(s server.Server, hdlr ChatHandler, opts ...server.HandlerOption) error {
	type chat interface {
		Send(ctx context.Context, in *SendRequest, out *Response) error
		Receive(ctx context.Context, in *ReceiveRequest, out *ReceiveResponse) error
	}
	type Chat struct {
		chat
	}
	h := &chatHandler{hdlr}
	return s.Handle(s.NewHandler(&Chat{h}, opts...))
}

type chatHandler struct {
	ChatHandler
}

func (h *chatHandler) Send(ctx context.Context, in *SendRequest, out *Response) error {
	return h.ChatHandler.Send(ctx, in, out)
}

func (h *chatHandler) Receive(ctx context.Context, in *ReceiveRequest, out *ReceiveResponse) error {
	return h.ChatHandler.Receive(ctx, in, out)
}
